

디자인 패턴


1. 디자인 패턴 이란 : 

- 효율적인 코드를 만들기 위한 설계 방법입니다.
- 효율적인 코드를 만들기 위한 방법입니다.
- sw를 재사용하거나 유지보수를 할 때 효율적으로 하기 위한 설계 방법입니다.

2. 디자인 패턴이 총 3개로 나누어지는데 :

- 생성 패턴, 행위 패턴, 구조 패터으로 이루어져 있습니다.

3. 어댑터 패턴

- 클래스를 바로 사용할 수 없을 때 중간에서 수정 등의 역할을 해주는 클래스 어댑터 클래스라고 하는데 이를 사용하는 것을 어댑터 패턴이라고 합니다.

- 인터페이스 호환성 문제로 같이 사용할 수 없는 클래스들을 연결해서 사용할 수 있습니다.

- 어댑터 패턴은 바로 사용할 수 없는 클래스들을 중간에서 변환을 통하여 사용할 수 있게끔 해주는 방법입니다.

4. 싱글톤 패턴

- 인스턴스가 필요 할 때 인스턴스를 새로 만들지 않고, 메모리에 할당 되어진 기존의 인스턴스를 활용하는 방법입니다.

- 싱글톤 패턴은 메모리 낭비를 방지하기 위해 객체의 인스턴스가 오직 하나만 생성 되는 패턴을 의미합니다.

생성이 되어도 다시 변할 수가 있다 -> 변화가 있으면 안되죠 -> final을 쓴거에요 상수를 의미한다 안변하는 변수를 의미하니까

- 단점으로는 한 객체가 많은 일에 참여 하므로 높은 결합도를 가질 수 있습니다.

5. 옵저버 패턴

- 객체의 상태 변화가 다른 객체의 상태와 연관 되도록 관계를 구성하는 패턴





