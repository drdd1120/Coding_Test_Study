
1. 자료구조

- array : 삽입 또는 삭제를 할 경우 기존의 값들을 전부 이동해야 되는 단점이 있다. 그에 반해 index값으로 바로 data 접근이 가능하므로 조회 측면에서는 빠르다는 장점이 있다.

- list : 삽입 또는 삭제를 할 경우 기존의 값들을 이동할 필요 없이 가능해서 빠르다는 장점이 있다. 그에 반해 조회를 할경우 처음 또는 마지막에서 부터 차근차근 찾아 나아가야 하는 단점이 있다.

- arraylist & linkedlist 차이 : array index를 가지고 있고 linked는 앞 또는 뒤부터 찾아 나아가야 한다.

- 스택 : 입력이랑 출력의방향이 한방향으로 제한되어져 있고, 가장 나중에 들어온 것이 가장 먼저 나오는 자료구조

- 큐 : 가장 먼저 들어온 것이 가장 먼저 나오는 자료구조이며 입력과 출력 부분이 다른 방향이다.

- 덱 : 입력과 출력이 양방향에서 가능한 큐이다.

- 트리 : 값을 가지고 있는 노드와 그 노드 사이를 연결하는 간선으로 이루어져 있다. 사이클이 존재하면 안된다.

완전 이진트리 : 마지막 레벨은 왼쪽 부터 채워진 이진트리
포화 이진트리 : 자식으로 무조건 두개씩 갖고 있는 것


- 힙 : 최대 값과 최소 값을 빠르게 찾아내는 자료구조 이다. 최대 힙, 최소 힙, 완전이진트리의 특성을 가지고 있다.

- BST : Redblack ?? -> 삽입 삭제 부분에 대해서 이해하고 있기!!

- 해시 : 데이터를 효율적으로 관리하기 위해 해시 함수를 구현하여 임의의 데이터 값을 해싱 값으로 매핑 하는 것이다.

- 트라이 : 보통 쓰였던 단어들의 수를 찾을 때 사용하는 자료구조

- BTree(진화) -> B+Tree 사용하고 이것은 nosql 에서 사용하는 자료구조이다. 많은 양을 저장 할 수 있구나 요정도

보통은 아래로 트리가 이어지는데 + 그옆으로도 이어져서 찾는데 더 효율적 일거에요.
