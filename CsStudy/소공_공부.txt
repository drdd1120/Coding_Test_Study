소프트웨어 공학



1. 리팩토링 : 

- 리팩토링은 돌아가는 동작은 그대로 두는데 코드를 깔금하게 개선하거나 유지보수(수정) 하는 것을 말합니다.

- 리팩토링은 내부 코드의 동작을 거의 바꾸지 않고 코드의 유지보수를 용이하게 하기 위해 하는 것입니다.

- 리팩토링은 외부의 동작에는 관여하지 않지만 내부의 코드를 정리하여 기능의 확장과 유지보수에 용이하게 하게끔 만드는 작업입니다.

리팩토링 실제로 어떻게 하나요??

- 리팩토링은 유지보수가 필요 할 부분이나 기능의 확장이 필요한 부분의 코드에 대해서 문제를 찾고, 코드를 수정합니다.

- 리팩토링의 목적이 소프트웨어를 이해하고 수정하기 쉽게 만드는 과정이기 때문에 중복 코드를 메소드로 추출하는 방식으로 리팩토링을 실제로 사용할 수 있습니다.

- 작성되어진 코드 내에서 중복이 존재하는 부분은 따로 메소드로 빼거나 여러가지의 기능을 하는 메소드와 클래스는 분리시켜서 하나의 기능만을 담당할 수있게끔 리팩토링을 진행합니다.

2. 클린코드 : 네이밍을 잘 해야된다, 중복이 없어야된다, 의존성이 최소가 되어야한다,
클래스 또는 메소드는 한가지의 기능만 처리해야 한다.

3. tdd 가 뭐냐 : 

- tdd는 테스트케이스를 작성한후에 코드를 개발하는 방식으로 유지보수 비용이 크거나 안정성이 중요한 프로젝트에 주로 사용하는 방법입니다.

- 보통 개발할땐 디자인을 한뒤에 코드를 개발하고 테스트를 진행하는데 tdd방식을 이용할 경우 테스트 케이스를 작성한 이후에 코드를 개발하므로써 안정성을 방식입니다.

tdd 장점과 단점은 뭐가있나요?

- tdd는 작업과 동시에 테스트를 진행하기 때문에 오류를 쉽게 캐치할 수 있고 고객의 요구사항을 쉽게 파악할 수 있습니다. 하지만 기존 방법과 달리 개발하는 단계에서 테스트를 함께 진행해야 하므로 생산비용이 추가적으로 발생합니다.

- 작업과 동시에 테스트를 작성해서 실시간으로 오류 파악이 가능하고 짧은 개발주기를 통해 고객과의 피드백과 요구사항을 수용하는 것이 용이합니다. 그러나 개발시 테스트 작성을 먼저 하기 때문에 개발 비용과 개발 시간이 더 걸릴 수도 있다는 것이 단점입니다.

- tdd의 장점으로는 개발을 하기전에 테스트케이스를 미리 작성하고 시작하므로 시스템의 오류를 쉽게 파악할 수 있으며, 짧은 개발 주기를 통해 피드백 수용이 용이합니다.
그에 반해 단점으로는 개발을 진행하기 전에 테스트케이스를 미리 설계해야 하므로 기존의 방식에 비해 cost가 더 많이 들 수 있습니다.

4. 알고 계시는 개발 방법론 같은게 있으시나요??

- 저는 애자일 방법론에 대해서 알고 있습니다.

- 저는 애자일 방법론에 대해서 알고 있습니다.

애자일 방법론이 어떤걸 까요?

- 애자일은 협력과 피드백을 바탕으로 짧은 주기의 개발 단위를 반복해서, 큰 프로젝트를 완성해 나가는 방식입니다.

- 애자일은 짧은 개발 주기를 반복해서 진행함으로써, 팀원가의 협력과 고객과의 피드백을 자주 함으로써 프로젝트 개발을 하는 것입니다.

- 애자일 기법은 협력과 피드백을 바탕으로 짧은 주기의 개발 단위를 반복하여 개발하는 것입니다. ++요즘과 같이 트랜드가 급속도로 변화하는 시대에서 sw불확실성에 유연하게 대처할 수 있는 기법으로 자주 사용되어지고 있습니다.

5. oop가 뭔지 아시면 설명해주시고 특징도 알려 주세요 ?

- oop는 객체지향 프로그래밍으로 프로그램을 객체라는 기본단위로 나누고 객채들간의 상호작용을 통해서 프로그램을 개발하는 것입니다.

- oop는 객체지향 프로그래밍 입니다. 객채지향 프로그래밍은 객체 내부에 필드와 메소드가 함께 존재하는 것으로 이 두개를 묶어서 관리하는 것입니다.
추상화, 캡슐화, 상속, 다형성이 있습니다.

- oop는 객체지향 프로그래밍 입니다. 객체지향 프로그래밍이란 사물을 하나의 객체로 보고 사물의 특징과 기능을 관리하며 각 객체의 상호작용을 통해 프로그래밍 하는 방법입니다. 주요 특징으로는 추상화와 캡슐화 상속 다형성이 있습니다.

6. 객체 지향 설계원칙에 대해서 아시나요?

- s()o()l()i()d() 5가지원칙 있습니다.

